# 01-connection.test â€” connect/disconnect & information
package require tcltest 2.5
namespace import ::tcltest::*

source [file join [file dirname [info script]] 00-setup.test]

test 01-1.0 {oralogon/oralogoff roundtrip} -constraints {have_connect} -body {
    ::OratclTest::with_connection L {
        # The handle should be a non-empty token like "oraL1"
        expr {[string match "oraL*" $L]}
    }
} -result 1

test 01-1.1 {orainfo returns a dict with autocommit} -constraints {have_connect} -body {
    ::OratclTest::with_connection L {
        set info [orainfo $L]
        dict exists $info autocommit
    }
} -result 1

test 01-1.2 {oraautocommit toggle} -constraints {have_connect} -body {
    ::OratclTest::with_connection L {
        set v1 [oraautocommit $L 1]
        set aut [dict get [orainfo $L] autocommit]
        list $v1 $aut
    }
} -result {1 1}

test 01-1.3 {oralogon with a small pool} -constraints {have_connect} -body {
    set cs [::OratclTest::connstr]
    package require oratcl 9.0
    # Minimal viable pool: 1..2
    set L [oralogon $cs -pool 1 2 1 -homogeneous 1 -getmode wait]
    # Open & close a statement to prove the session works
    set S [oraopen $L]
    oraclose $S
    # Turn it off, then return success
    set _ [oralogoff $L]
    set _ 1
} -result 1

test 01-1.4 {invalid handle errors are clear} -constraints {have_connect} -body {
    package require oratcl 9.0
    set e1 [catch {oraopen xyz} m1]; set m1
} -match glob -result *invalid*logon*handle*
